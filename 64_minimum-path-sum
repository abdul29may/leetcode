class Solution:
    def minPathSum_DP_Recursion_Memoization(self, grid: List[List[int]]) -> int:
        ROWS = len(grid)
        COLS = len(grid[0])

        memo = {}
        def dfs(r, c):
            if r not in range(ROWS) or c not in range(COLS):
                return float("inf")

            if r == ROWS - 1 and c == COLS - 1:
                return grid[r][c]

            if (r, c) in memo:
                return memo[(r, c)]

            res1 = grid[r][c] + dfs(r, c + 1)
            res2 = grid[r][c] + dfs(r + 1, c)

            memo[(r, c)] = min(res1, res2)

            return memo[(r, c)]

        return dfs(0, 0)

    def minPathSum_Recursion(self, grid: List[List[int]]) -> int:
        ROWS = len(grid)
        COLS = len(grid[0])

        def dfs(r, c):
            if r not in range(ROWS) or c not in range(COLS):
                return float("inf")

            if r == ROWS - 1 and c == COLS - 1:
                return grid[r][c]

            res1 = grid[r][c] + dfs(r, c + 1)
            res2 = grid[r][c] + dfs(r + 1, c)

            return min(res1, res2)

        return dfs(0, 0)
